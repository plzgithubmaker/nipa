# python 데이터 분석 라이브러리인 pandas를 불러오고, 이를 pd라는 이름으로 사용(앨리어스 지정)합니다.
import pandas as pd

# pd.read_csv() 명령어를 사용하여 csv 형태로 저장된 데이터를 불러올 수 있습니다.
shopping_data = pd.read_csv('./data/shopping_data.csv', index_col='상품군별')


# 데이터를 일부분만 불러와서 읽을 때는 데이터셋.loc[행, 열]을 사용합니다.

# 예컨대 다음 명령어는 '컴퓨터 및 주변기기'의 2020년 1주차 온라인 거래량을 의미합니다.


# 행, 열을 구체적으로 지정하는 대신 :(콜론)을 넣으면 해당 행 전체 또는 열 전체의 데이터를 불러옵니다.
# 예컨대 다음 명령어는 '컴퓨터 및 주변기기'의 모든 온라인 거래량 데이터를 불러옵니다.

# 실습: 2020년 5주차('20-5')의 모든 항목의 거래량 데이터를 불러와보세요
# 힌트 - 이 데이터셋은 기간 데이터가 '행'이 아닌 열'에 들어가 있습니다.
print('컴퓨터 및 주변기기의 2020년 5주차 온라인 거래량')
print(shopping_data.loc[: , '20-5'])

#######

# pandas의 열 계산 실습 1
print('20년 6월 데이터와 19년 6월 데이터의 차이')
print(shopping_data['20-6'] - shopping_data['19-6'])

# pandas의 열 계산 실습 2
# 참고 - YoY 계산식: ((기준년도 데이터 - 직전년도 데이터) / 직전년도 데이터) X 100
# 참고 - 연산자: python에서는 곱하기를 *로, 나누기를 /로 사용합니다.
print('\n20년 6월 데이터 및 19년 6월 데이터의 YoY')
print((shopping_data['20-6'] - shopping_data['19-6']) / shopping_data['19-6'] * 100) 

# 실습: 20년 2월의 YoY를 계산해봅니다
print('\n20년 2월 데이터 YoY')
print((shopping_data['20-2'] - shopping_data['19-2']) / shopping_data['19-2']  *100)

print('오름차순 정렬')
print(yoy_2006.sort_values())

print('\n내림차순 정렬')
print(yoy_2006.sort_values(ascending=False))


